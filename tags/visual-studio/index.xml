<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>visual studio on Mark Vincze</title>
    <link>https://blog.markvincze.com/tags/visual-studio/</link>
    <description>Recent content in visual studio on Mark Vincze</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Nov 2017 22:34:50 +0000</lastBuildDate><atom:link href="https://blog.markvincze.com/tags/visual-studio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing Code Fragments extension in Visual Studio Code for managing snippets during presentations</title>
      <link>https://blog.markvincze.com/introducing-code-fragments-extension-for-visual-studio-code/</link>
      <pubDate>Sun, 26 Nov 2017 22:34:50 +0000</pubDate>
      
      <guid>https://blog.markvincze.com/introducing-code-fragments-extension-for-visual-studio-code/</guid>
      <description>Recently I started working on a simple Visual Studio Code extension I&amp;rsquo;d like to introduce in this post.
Occasionally I do tech presentations, in which I usually like to do some live code demos. To make this smoother, Visual Studio has always had a really useful—although somewhat undocumented—feature, which makes it possible to save snippets of code, and easily insert them during the presentation, to save some typing.
We can create such a &amp;ldquo;snippet&amp;rdquo; (not to be confused with actuala code snippets) by selecting a piece of code, and dropping it onto the Toolbox window.</description>
    </item>
    
    <item>
      <title>How to store state during SpecFlow tests?</title>
      <link>https://blog.markvincze.com/how-to-store-state-during-specflow-tests/</link>
      <pubDate>Sat, 06 Jun 2015 19:19:58 +0000</pubDate>
      
      <guid>https://blog.markvincze.com/how-to-store-state-during-specflow-tests/</guid>
      <description>#Introduction SpecFlow is an implementation of the Gherkin language for the .NET Framework. SpecFlow is to .NET what Cucumber is for the JavaScript ecosystem. It is a way to write tests in a DSL that is easily readable (and maybe writable) by not just developers, but also the business. A simple example from the Cucumber web site (which is also generated when a new SpecFlow feature is added in Visual Studio) is the following:</description>
    </item>
    
    <item>
      <title>Attach to specific Process shortcut in Visual Studio</title>
      <link>https://blog.markvincze.com/attach-to-process-shortcut-in-visual-studio/</link>
      <pubDate>Sun, 26 Apr 2015 12:21:19 +0000</pubDate>
      
      <guid>https://blog.markvincze.com/attach-to-process-shortcut-in-visual-studio/</guid>
      <description>It&amp;rsquo;s a very useful feature of Visual Studio that besides starting an application for debugging, we can attach the debugger to already running processes as well. This can be done with the Debug-&amp;gt;Attach to Process&amp;hellip; option, where we have to select the desired one from a list of all running processes. This method of attaching to a process is OK if you have to do it only once in a while, but if you have to debug applications this way regularly, it becomes time-consuming to search for the process in the list every time.</description>
    </item>
    
  </channel>
</rss>
