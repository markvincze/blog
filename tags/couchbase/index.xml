<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>couchbase on Mark Vincze</title>
    <link>http://localhost:1313/tags/couchbase/</link>
    <description>Recent content in couchbase on Mark Vincze</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Jun 2017 20:20:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/couchbase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tear down your ASP.NET Core api between integration tests</title>
      <link>http://localhost:1313/tear-down-your-asp-net-core-api-between-integration-tests/</link>
      <pubDate>Wed, 21 Jun 2017 20:20:00 +0000</pubDate>
      
      <guid>http://localhost:1313/tear-down-your-asp-net-core-api-between-integration-tests/</guid>
      <description>The way to write integration tests for ASP.NET applications has been made much easier with the advent of ASP.NET Core. This is mainly due to the programming model becoming super modular, which means that it is really easy to spin up an instance of our whole web application for testing purposes and start sending HTTP requests to it from a simple unit test.
The following code illustrates a unit test method, which starts up an ASP.</description>
    </item>
    
    <item>
      <title>Bulk updating document expiry in Couchbase</title>
      <link>http://localhost:1313/bulk-updating-document-expiry-in-couchbase/</link>
      <pubDate>Sat, 25 Mar 2017 15:41:17 +0000</pubDate>
      
      <guid>http://localhost:1313/bulk-updating-document-expiry-in-couchbase/</guid>
      <description>Introduction When using Couchbase, sometimes we want to update the expiry of all of the documents stored in a bucket. In my case it was in a project where initially we weren&amp;rsquo;t sure how we want to handle document expiry (either periodically run some query on our data store, and backup and remove all the old elementsâ€”or use the expiry mechanism built into Couchbase), so we ended up deciding we&amp;rsquo;ll just insert all our documents without expiry for now, and we&amp;rsquo;ll figure out later how we want to handle the problem.</description>
    </item>
    
    <item>
      <title>Simple client-side compression for Couchbase - with benchmarks</title>
      <link>http://localhost:1313/simple-client-side-compression-for-couchbase-with-benchmarks/</link>
      <pubDate>Sat, 16 Jan 2016 16:53:00 +0000</pubDate>
      
      <guid>http://localhost:1313/simple-client-side-compression-for-couchbase-with-benchmarks/</guid>
      <description>Introduction In the last post I described the quirks and problems I encountered during getting started with using Couchbase Server in a production environment.
When we are storing complex objects, by default the .NET Couchbase SDK uses Json.NET serialization. It is possible to create indices and views on this Json structure, and execute custom queries to filter our documents based on their Json property values. I guess in this scenario we can think of Couchbase as a NoSQL Document-store.</description>
    </item>
    
    <item>
      <title>Couchbase Server: tips for troubleshooting issues</title>
      <link>http://localhost:1313/couchbase-server-tips-for-troubleshooting-issues/</link>
      <pubDate>Sun, 10 Jan 2016 15:45:00 +0000</pubDate>
      
      <guid>http://localhost:1313/couchbase-server-tips-for-troubleshooting-issues/</guid>
      <description>Recently at work we started using Couchbase Server to replace a rather outdated caching solution in our architecture. This was the first time I had to use Couchbase and its .NET SDK, and I have encountered a couple of issues along the way.
This post is a recollection of the problems we faced. (If you are interested in a &amp;ldquo;getting started&amp;rdquo; tutorial, I recommend reading the official documentation of the .</description>
    </item>
    
  </channel>
</rss>
