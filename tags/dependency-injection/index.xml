<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dependency-injection on Mark Vincze</title>
    <link>https://blog.markvincze.com/tags/dependency-injection/</link>
    <description>Recent content in dependency-injection on Mark Vincze</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Apr 2017 14:31:27 +0000</lastBuildDate><atom:link href="https://blog.markvincze.com/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Two gotchas with scoped and singleton dependencies in ASP.NET Core</title>
      <link>https://blog.markvincze.com/two-gotchas-with-scoped-and-singleton-dependencies-in-asp-net-core/</link>
      <pubDate>Mon, 17 Apr 2017 14:31:27 +0000</pubDate>
      
      <guid>https://blog.markvincze.com/two-gotchas-with-scoped-and-singleton-dependencies-in-asp-net-core/</guid>
      <description>With ASP.NET Core a new built-in lightweight Dependency Injection framework was introduced in the Microsoft.Extensions.DependencyInjection package, thus in ASP.NET Core applications we don&amp;rsquo;t necessarily need an external library such as Ninject or Unity to do DI, we can simply use the built-in package (which—although being framework-agnostic—plays really nicely with ASP.NET Core). Its feature set is rather simple compared to other more full-blown DI frameworks, but it gets the job done in most applications.</description>
    </item>
    
  </channel>
</rss>
