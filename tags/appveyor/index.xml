<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>appveyor on Mark Vincze</title>
    <link>https://markvincze.github.io/blog/tags/appveyor/</link>
    <description>Recent content in appveyor on Mark Vincze</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Nov 2017 00:00:34 +0000</lastBuildDate><atom:link href="https://markvincze.github.io/blog/tags/appveyor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build and publish documentation and API reference with DocFx for .NET Core projects</title>
      <link>https://markvincze.github.io/blog/build-and-publish-documentation-and-api-reference-with-docfx-for-net-core-projects/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:34 +0000</pubDate>
      
      <guid>https://markvincze.github.io/blog/build-and-publish-documentation-and-api-reference-with-docfx-for-net-core-projects/</guid>
      <description>DocFx is an open source tool for generating documentation and API reference, and it has great support for .NET Core projects.
DocFx can be slightly intimidating first, because it has a really wide set of features, and the default scaffolded configuration contains quite a lot of files, which at first sight can look a bit complex.
With this post I&amp;rsquo;d like to give a guide about what is a minimal configuration you need if you want to set up documentation for a .</description>
    </item>
    
    <item>
      <title>Setting up Coveralls with OpenCover for a .NET Core project</title>
      <link>https://markvincze.github.io/blog/setting-up-coveralls-for-a-net-core-project/</link>
      <pubDate>Wed, 14 Jun 2017 19:46:00 +0000</pubDate>
      
      <guid>https://markvincze.github.io/blog/setting-up-coveralls-for-a-net-core-project/</guid>
      <description>Update: The original version of this post was written when the dotnet toolchain was built on top of the project.json based project structure. Since then the project.json was deprecated, and .NET Core moved to a csproj-based approach.
Because the project.json was completely deprecated, I decided not to write a new post, but simply adjust this one to work with the new toolchain (as of writing, that is dotnet 1.1).
Unit test coverage is an interesting metric.</description>
    </item>
    
    <item>
      <title>Setting up an AppVeyor pipeline for Golang</title>
      <link>https://markvincze.github.io/blog/setting-up-an-appveyor-pipeline-for-golang/</link>
      <pubDate>Sat, 16 Jul 2016 15:47:28 +0000</pubDate>
      
      <guid>https://markvincze.github.io/blog/setting-up-an-appveyor-pipeline-for-golang/</guid>
      <description>Recently at my day job I have been working on a Golang-based application, for which I wanted to set up an automated CD pipeline for building and releasing. Our application is a command line tool, so the release part is basically copying and uploading the binaries to a specified location.
Since I have been using AppVeyor for my .NET Core projects (Stubbery and RestApiHelpers), and it&amp;rsquo;s working really nicely, it seemed to be the obvious choice for Golang as well.</description>
    </item>
    
  </channel>
</rss>
