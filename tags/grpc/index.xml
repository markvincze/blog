<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grpc on Mark Vincze</title>
    <link>https://blog.markvincze.com/tags/grpc/</link>
    <description>Recent content in grpc on Mark Vincze</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Apr 2023 20:00:00 +0000</lastBuildDate><atom:link href="https://blog.markvincze.com/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing Sabledocs, a documentation generator for Protobuf and gRPC</title>
      <link>https://blog.markvincze.com/introducing-sabledocs/</link>
      <pubDate>Sun, 16 Apr 2023 20:00:00 +0000</pubDate>
      
      <guid>https://blog.markvincze.com/introducing-sabledocs/</guid>
      <description>In this post I&amp;rsquo;d like to introduce a a new project I started working on called Sabledocs, a simple static documentation generator for Protobuf and gRPC contracts.
As I started using Protobuf and gRPC more and more for service-to-service communication, I started looking for a way to generate a documentation site for the Protobuf contracts.
I had the following requirements.
 Be able to generate static HTML documentation with a CLI.</description>
    </item>
    
    <item>
      <title>Include a multi-file protobuf package in a .NET Core project</title>
      <link>https://blog.markvincze.com/include-multi-file-protobuf-package-in-dotnet/</link>
      <pubDate>Wed, 25 May 2022 20:00:00 +0000</pubDate>
      
      <guid>https://blog.markvincze.com/include-multi-file-protobuf-package-in-dotnet/</guid>
      <description>We can get the .NET types for a Protobuf contract automatically generated in a .NET Core project by adding a reference to a proto file.
A basic example from the official docs is having the following proto file in our project.
syntax = &amp;#34;proto3&amp;#34;;service Greeter { rpc SayHello (HelloRequest) returns (HelloReply);}message HelloRequest { string name = 1;}message HelloReply { string message = 1;}If we have this file inside our project folder in a subfolder called Protos, we can reference it in our project the following way.</description>
    </item>
    
  </channel>
</rss>
