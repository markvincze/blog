<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>suave on Mark Vincze</title>
    <link>https://markvincze.github.io/blog/tags/suave/</link>
    <description>Recent content in suave on Mark Vincze</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Mar 2017 12:51:45 +0000</lastBuildDate><atom:link href="https://markvincze.github.io/blog/tags/suave/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jumpstart F# web development: F# with Suave.IO on .NET Core</title>
      <link>https://markvincze.github.io/blog/jumpstart-f-web-development-f-with-suave-io-on-net-core/</link>
      <pubDate>Sun, 12 Mar 2017 12:51:45 +0000</pubDate>
      
      <guid>https://markvincze.github.io/blog/jumpstart-f-web-development-f-with-suave-io-on-net-core/</guid>
      <description>In a previous post we&amp;rsquo;ve seen how we can create a simple web application with Suave on the full .NET Framework. In the last post of the series we&amp;rsquo;ll take a look at how we can do the same thing on .NET Core.
This is gonna be a short post, since there are no real gotchas in this scenario, it&amp;rsquo;s really easy to set everything up.
Note: In this post I will use the new csproj-based .</description>
    </item>
    
    <item>
      <title>Jumpstart F# web development: F# with Suave.IO on classic .NET</title>
      <link>https://markvincze.github.io/blog/jumpstart-f-web-development-f-with-suave-io-on-classic-net/</link>
      <pubDate>Sat, 11 Feb 2017 15:12:50 +0000</pubDate>
      
      <guid>https://markvincze.github.io/blog/jumpstart-f-web-development-f-with-suave-io-on-classic-net/</guid>
      <description>In the second part of the series we take a look at how we can develop a web application using Sauve on the classic .NET Framework.
Suave is a lightweight web framework and server, which was implemented in F# from the ground up with functional programming in mind, using constructs which fit the F# word nicely, so we won&amp;rsquo;t have to create .NET classes or use inheritence and state mutation to configure our application (as we had to do with ASP.</description>
    </item>
    
    <item>
      <title>Series: Jumpstart F# web development</title>
      <link>https://markvincze.github.io/blog/series-jumpstart-f-web-development/</link>
      <pubDate>Sun, 05 Feb 2017 17:35:00 +0000</pubDate>
      
      <guid>https://markvincze.github.io/blog/series-jumpstart-f-web-development/</guid>
      <description>F# is a functional first general purpose programming language targeting the .NET Framework. Since .NET is a framework commonly used for web development (most often with C# and ASP.NET). And if we would like to do web development on the .NET framework in a more functional style, using F# is the logical choice.
F# is a language loved by its community, which is actively working on improving its tooling and creating its own ecosystem.</description>
    </item>
    
  </channel>
</rss>
