<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Mark Vincze</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>Recent content in golang on Mark Vincze</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Oct 2016 14:39:59 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programmatically refreshing a browser tab from a Golang application</title>
      <link>http://localhost:1313/programmatically-refreshing-a-browser-tab-from-a-golang-application/</link>
      <pubDate>Sun, 30 Oct 2016 14:39:59 +0000</pubDate>
      
      <guid>http://localhost:1313/programmatically-refreshing-a-browser-tab-from-a-golang-application/</guid>
      <description>Introduction At work I&amp;rsquo;ve been working on a client-side Golang application (a command-line tool), which is used as part of the development toolchain we&amp;rsquo;re using at the company.
This application is used from the command line to upload packages to our development web server, which is then opened in the browser.
Instead of opening our development site in a new tab every time, I wanted to programmatically refresh the browser tab if one has already been opened.</description>
    </item>
    
    <item>
      <title>Setting up a Travis-CI pipeline for Golang</title>
      <link>http://localhost:1313/setting-up-a-travis-ci-pipeline-for-golang/</link>
      <pubDate>Sat, 15 Oct 2016 15:36:14 +0000</pubDate>
      
      <guid>http://localhost:1313/setting-up-a-travis-ci-pipeline-for-golang/</guid>
      <description>In the previous post we looked at how we can set up a pipeline in AppVeyor for building and releasing a Golang application. Recently I made some changes to the project I&amp;rsquo;m working on, which prevents the it to be cross-compiled on a Windows build agent. After the change I was able to properly do the build only on an OSX machine.
This caused a problem for me, since AppVeyor only supports using a Windows machine as the build agent, so I wasn&amp;rsquo;t able to properly cross compile the application any more.</description>
    </item>
    
    <item>
      <title>Setting up an AppVeyor pipeline for Golang</title>
      <link>http://localhost:1313/setting-up-an-appveyor-pipeline-for-golang/</link>
      <pubDate>Sat, 16 Jul 2016 15:47:28 +0000</pubDate>
      
      <guid>http://localhost:1313/setting-up-an-appveyor-pipeline-for-golang/</guid>
      <description>Recently at my day job I have been working on a Golang-based application, for which I wanted to set up an automated CD pipeline for building and releasing. Our application is a command line tool, so the release part is basically copying and uploading the binaries to a specified location.
Since I have been using AppVeyor for my .NET Core projects (Stubbery and RestApiHelpers), and it&amp;rsquo;s working really nicely, it seemed to be the obvious choice for Golang as well.</description>
    </item>
    
  </channel>
</rss>
